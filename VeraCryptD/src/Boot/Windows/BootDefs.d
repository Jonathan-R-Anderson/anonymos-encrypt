module Boot.Windows.BootDefs;

enum uint TC_BOOT_MEMORY_REQUIRED = 43;

version(TC_WINDOWS_BOOT_SINGLE_CIPHER_MODE)
{
    static if(0){}
}

enum uint TC_BOOT_LOADER_SEGMENT = 0x9000;

static if (TC_BOOT_MEMORY_REQUIRED <= 32)
    enum uint TC_BOOT_LOADER_SEGMENT_LOW = TC_BOOT_LOADER_SEGMENT - 32 * 1024 / 16;
else
    enum uint TC_BOOT_LOADER_SEGMENT_LOW = TC_BOOT_LOADER_SEGMENT - 64 * 1024 / 16;

enum uint TC_COM_EXECUTABLE_OFFSET = 0x100;

enum uint TC_BOOT_LOADER_LOWMEM_SEGMENT = 0x2000;
enum uint TC_BOOT_LOADER_BUFFER_SEGMENT = 0x4000;
enum uint TC_BOOT_LOADER_ALT_SEGMENT = 0x6000;

enum uint TC_BOOT_LOADER_STACK_TOP = TC_BOOT_MEMORY_REQUIRED * 1024 - 4;

enum uint TC_LB_SIZE = 512;
enum uint TC_BOOT_LOADER_AREA_SECTOR_COUNT = 63;

enum uint TC_BOOT_SECTOR_VERSION_OFFSET = 430;
enum uint TC_BOOT_SECTOR_LOADER_LENGTH_OFFSET = 432;
enum uint TC_BOOT_SECTOR_LOADER_CHECKSUM_OFFSET = 434;
enum uint TC_BOOT_SECTOR_USER_CONFIG_OFFSET = 439;

enum uint TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH = 24;
enum uint TC_BOOT_SECTOR_USER_MESSAGE_OFFSET = TC_BOOT_SECTOR_VERSION_OFFSET - TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH;

enum uint TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_SIZE = 4;
enum uint TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_OFFSET = TC_BOOT_SECTOR_USER_MESSAGE_OFFSET - TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_SIZE;

enum uint TC_BOOT_SECTOR_PIM_VALUE_SIZE = 2;
enum uint TC_BOOT_SECTOR_PIM_VALUE_OFFSET = TC_BOOT_SECTOR_OUTER_VOLUME_BAK_HEADER_CRC_OFFSET - TC_BOOT_SECTOR_PIM_VALUE_SIZE;

enum uint TC_BOOT_LOADER_DECOMPRESSOR_START_SECTOR = 2;
enum uint TC_BOOT_LOADER_DECOMPRESSOR_SECTOR_COUNT = 4;
enum uint TC_BOOT_LOADER_DECOMPRESSOR_MEMORY_SIZE = 32768;
